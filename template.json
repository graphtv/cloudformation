{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [ {
				"Label": { "default": "Naming" },
				"Parameters": [ "DomainName", "ValidationEmailDomain", "EnvNamePretty", "EnvNameDNS" ]
			}, {
				"Label": { "default": "Security" },
				"Parameters": [ "CORSMode" ]
			}, {
				"Label": { "default": "Sizing" },
				"Parameters": [ "DynamoWCU", "DynamoRCU" ]
			} ],
			"ParameterLabels": {
				"DomainName": { "default": "Domain Name" },
				"ValidationEmailDomain": { "default": "Validation Email Domain" },
				"CORSMode": { "default": "CORS Mode" },
				"EnvNamePretty": { "default": "Pretty Environment Name" },
				"EnvNameDNS": { "default": "DNS-Compliant Environment Name" },
				"DynamoRCU": { "default": "DynamoDB Read Units" },
				"DynamoWCU": { "default": "DynamoDB Write Units" }
			}
		}
	},
	"Parameters": {
		"DomainName": {
			"Type": "String",
			"Default": "",
			"Description": "Domain Name for Route53 Hosted Zone and Static S3 Site"
		},
		"ValidationEmailDomain": {
			"Type": "String",
			"Default": "",
			"Description": "The email domain for ACM to use to send you validation emails. Can be the same as Domain Name or a higher level domain."
		},
		"CORSMode": {
			"Type": "String",
			"AllowedValues": [
				"Restrictive",
				"Permissive"
			],
			"Default": "Permissive",
			"Description": "Cross-Origin Resource Sharing Mode. Restrictive allows API calls only from api.[Domain Name] addresses. Permissive allows API calls from any address."
		},
		"EnvNamePretty": {
			"Type": "String",
			"Default": "Dev",
			"Description": "Pretty environment designation"
		},
		"EnvNameDNS": {
			"Type": "String",
			"Default": "dev",
			"Description": "DNS-Compliant environment designation"
		},
		"DynamoWCU": {
			"Type": "Number",
			"Default": "5",
			"Description": "Write Capacity Units (1K Writes Per Second)"
		},
		"DynamoRCU": {
			"Type": "Number",
			"Default": "5",
			"Description": "Read Capacity Units (4K Consisent Reads Per Second [x2 for non-consistent])"
		}
	},
	"Conditions": {
		"CORSIsRestrictive": { "Fn::Equals": [ { "Ref": "CORSMode" }, "Restrictive" ] }
	},
	"Resources": {
		"HostedZone": {
			"Type": "AWS::Route53::HostedZone",
			"Properties": {
				"HostedZoneConfig": {
					"Comment": { "Fn::Join": [ "", [ "GraphTV - ", { "Ref": "EnvNamePretty" } ] ] }
				},
				"Name": { "Ref": "DomainName" }
			}
		},
		"CloudFrontAlias": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"AliasTarget": {
					"DNSName": { "Fn::GetAtt": [ "CloudFront", "DomainName" ] },
					"HostedZoneId": "Z2FDTNDATAQYW2"	
				},
				"Comment": "To CloudFront S3",
				"HostedZoneId": { "Ref": "HostedZone" },
				"Name": { "Fn::Join": [ "", [ { "Ref": "DomainName" }, "." ] ] },
				"Type": "A"
			}
		},
		"APIGatewayAlias": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"AliasTarget": {
					"DNSName": { "Fn::GetAtt": [ "RestAPICustomDomain", "DistributionDomainName" ] },
					"HostedZoneId": "Z2FDTNDATAQYW2"	
				},
				"Comment": "To API Gateway CloudFront",
				"HostedZoneId": { "Ref": "HostedZone" },
				"Name": { "Fn::Join": [ "", [ "api.", { "Ref": "DomainName" }, "." ] ] },
				"Type": "A"
			}
		},
		"Certificate": {
			"Type": "AWS::CertificateManager::Certificate",
			"Properties": {
				"DomainName": { "Ref": "DomainName" },
				"DomainValidationOptions": [ {
					"DomainName": { "Ref": "DomainName" },
					"ValidationDomain": { "Ref": "ValidationEmailDomain" }
				} ],
				"Tags": [ {
					"Key": "Name",
					"Value": { "Fn::Join": [ "", [ "GraphTV - ", { "Ref": "EnvNamePretty" } ] ] }
				} ]
			}
		},
		"APICertificate": {
			"Type": "AWS::CertificateManager::Certificate",
			"Properties": {
				"DomainName": { "Fn::Join": [ "", [ "api.", { "Ref": "DomainName" } ] ] },
				"DomainValidationOptions": [ {
					"DomainName": { "Fn::Join": [ "", [ "api.", { "Ref": "DomainName" } ] ] },
					"ValidationDomain": { "Ref": "ValidationEmailDomain" }
				} ],
				"Tags": [ {
					"Key": "Name",
					"Value": { "Fn::Join": [ "", [ "GraphTV - ", { "Ref": "EnvNamePretty" }, " API" ] ] }
				} ]
			}
		},
		"CloudFront": {
			"Type": "AWS::CloudFront::Distribution",
			"Properties": {
				"DistributionConfig": {
					"Aliases": [
						{ "Ref": "DomainName" }
					],
					"Comment": { "Fn::Join": [ "", [ "GraphTV - ", { "Ref": "EnvNamePretty" } ] ] },
					"DefaultCacheBehavior": {
						"ForwardedValues": {
							"QueryString": false
						},
						"TargetOriginId": { "Fn::Join": [ "", [ "S3-", { "Ref": "DomainName" } ] ] },
						"ViewerProtocolPolicy": "redirect-to-https"
					},
					"DefaultRootObject": "index.html",
					"Enabled": true,
					"HttpVersion": "http2",
					"Origins": [ {
						"DomainName": { "Fn::Join": [ "", [ { "Ref": "DomainName" }, ".s3.amazonaws.com" ] ] },
						"Id": { "Fn::Join": [ "", [ "S3-", { "Ref": "DomainName" } ] ] },
						"S3OriginConfig": {
							"OriginAccessIdentity": ""
						}
					} ],
					"PriceClass": "PriceClass_100",
					"ViewerCertificate": {
						"AcmCertificateArn": { "Ref": "Certificate" },
						"MinimumProtocolVersion": "TLSv1.1_2016",
						"SslSupportMethod": "sni-only"
					}
				}
			}
		},
		"RatingsDB": {
			"Type": "AWS::DynamoDB::Table",
			"Properties": {
				"AttributeDefinitions": [
					{ "AttributeName": "id", "AttributeType": "S" }
				],
				"ProvisionedThroughput": {
					"ReadCapacityUnits": { "Ref": "DynamoRCU" },
					"WriteCapacityUnits": { "Ref": "DynamoWCU" }
				},
				"TableName": { "Fn::Join": [ "", [ "GraphTV-Ratings-", { "Ref": "EnvNamePretty" } ] ] },
				"KeySchema": [
					{ "AttributeName": "id", "KeyType": "HASH" }
				]
			}
		},
		"StaticWebsiteBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": { "Ref": "DomainName" },
				"AccessControl": "PublicRead",
				"WebsiteConfiguration": {
					"IndexDocument": "index.html",
					"ErrorDocument": "error.html"
				}
			},
			"DeletionPolicy": "Retain"
		},
		"StaticWebsiteBucketPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": { "Ref": "StaticWebsiteBucket" },
				"PolicyDocument": {
					"Id": "WebAccess",
					"Version": "2012-10-17",
					"Statement": [ {
						"Sid": "PublicReadForGetBucketObjects",
						"Effect": "Allow",
						"Principal": "*",
						"Action": "s3:GetObject",
						"Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "StaticWebsiteBucket" }, "/*" ] ] }
					} ]
				}
			}
		},
		"SearchBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": { "Fn::Join": [ "", [ "graphtv-search-", { "Ref": "EnvNameDNS" } ] ] }
			},
			"DeletionPolicy": "Retain"
		},
		"RestAPI": {
			"Type": "AWS::ApiGateway::RestApi",
			"Properties": {
				"Name": { "Fn::Join": [ "", [ "GraphTV-", { "Ref": "EnvNamePretty" } ] ] }
			}
		},
		"APILiveDeployment": {
			"Type": "AWS::ApiGateway::Deployment",
			"DependsOn": [
                "APIShow",
                "APIShowShowId",
                "APIShowShowIdRatings",
                "APIShowShowIdRatingsGET",
                "APIShowShowIdRatingsOPTIONS",
                "APISearch",
                "APISearchQuery",
                "APISearchQueryGET"
			],
			"Properties": {
				"Description": { "Fn::Join": [ "", [ "GraphTV-", { "Ref": "EnvNamePretty" } ] ] },
				"RestApiId": { "Ref": "RestAPI" }
			}
		},
		"APILiveStage": {
			"Type": "AWS::ApiGateway::Stage",
			"Properties": {
				"DeploymentId": { "Ref": "APILiveDeployment" },
				"Description": { "Fn::Join": [ "", [ "GraphTV-", { "Ref": "EnvNamePretty" } ] ] },
				"RestApiId": { "Ref": "RestAPI" },
				"StageName": "live",
				"Variables": {
					"environment": { "Ref": "EnvNamePretty" }
				}
			}
		},
		"RestAPICustomDomain": {
			"Type": "AWS::ApiGateway::DomainName",
			"Properties": {
				"CertificateArn": { "Ref": "APICertificate" },
				"DomainName": { "Fn::Join": [ "", [ "api.", { "Ref": "DomainName" } ] ] },
				"EndpointConfiguration": {
					"Types": [ "EDGE" ]
				}
			}
		},
		"RestAPIMapping": {
			"Type": "AWS::ApiGateway::BasePathMapping",
			"Properties": {
				"DomainName": { "Ref": "RestAPICustomDomain" },
				"RestApiId": { "Ref": "RestAPI" },
				"Stage": { "Ref": "APILiveStage" }
			}
		},
		"APIShow": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ParentId": { "Fn::GetAtt": ["RestAPI", "RootResourceId"] },
				"PathPart": "show"
			}
		},
		"APIShowShowId": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ParentId": { "Ref": "APIShow" },
				"PathPart": "{showId}"
			}
		},
		"APIShowShowIdRatings": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ParentId": { "Ref": "APIShowShowId" },
				"PathPart": "ratings"
			}
		},
		"APIShowShowIdRatingsGET": {
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ResourceId": { "Ref": "APIShowShowIdRatings" },
				"AuthorizationType": "NONE",
				"HttpMethod": "GET",
				"Integration": {
					"Type": "AWS_PROXY",
					"IntegrationHttpMethod": "POST",
					"Uri": { "Fn::Join": [ "", [
						"arn:aws:apigateway:",
						{ "Ref": "AWS::Region"},
						":lambda:path/2015-03-31/functions/arn:aws:lambda:",
						{ "Ref": "AWS::Region"},
						":",
						{ "Ref": "AWS::AccountId" },
						":function:GraphTV-Serverless-",
						{ "Ref": "EnvNamePretty" },
						"-ShowRatings/invocations"
					] ] }
				},
				"MethodResponses": [ {
					"StatusCode": "200",
					"ResponseModels": {},
					"ResponseParameters": {
						"method.response.header.Access-Control-Allow-Origin": false
					}
				} ]
			}
		},
		"APIShowShowIdRatingsOPTIONS": {
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ResourceId": { "Ref": "APIShowShowIdRatings" },
				"AuthorizationType": "NONE",
				"HttpMethod": "OPTIONS",
				"Integration": {
					"Type": "MOCK",
					"RequestTemplates": {
						"application/json": "{\"statusCode\": 200}"
					},
					"PassthroughBehavior": "WHEN_NO_MATCH",
					"IntegrationResponses": [ {
						"StatusCode": "200",
						"ResponseParameters": {
							"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
							"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
							"method.response.header.Access-Control-Allow-Origin": { "Fn::If": [ "CORSIsRestrictive",
								{ "Fn::Join": [ "", [ "'", "api.", { "Ref": "DomainName" }, "'" ] ] },
								"'*'"
							] }
						},
						"ResponseTemplates": {
							"application/json": ""
						}
					} ]
				},
				"MethodResponses": [ {
					"StatusCode": "200",
					"ResponseModels": {
						"application/json": "Empty"
					},
					"ResponseParameters": {
						"method.response.header.Access-Control-Allow-Headers": false,
						"method.response.header.Access-Control-Allow-Methods": false,
						"method.response.header.Access-Control-Allow-Origin": false
					}
				} ]
			}
		},
		"APISearch": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ParentId": { "Fn::GetAtt": ["RestAPI", "RootResourceId"] },
				"PathPart": "search"
			}
		},
		"APISearchQuery": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ParentId": { "Ref": "APISearch" },
				"PathPart": "{query}"
			}
		},
		"APISearchQueryGET": {
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ResourceId": { "Ref": "APISearchQuery" },
				"AuthorizationType": "NONE",
				"HttpMethod": "GET",
				"Integration": {
					"Type": "AWS_PROXY",
					"IntegrationHttpMethod": "POST",
					"Uri": { "Fn::Join": [ "", [
						"arn:aws:apigateway:",
						{ "Ref": "AWS::Region"},
						":lambda:path/2015-03-31/functions/arn:aws:lambda:",
						{ "Ref": "AWS::Region"},
						":",
						{ "Ref": "AWS::AccountId" },
						":function:GraphTV-Serverless-",
						{ "Ref": "EnvNamePretty" },
						"-Search/invocations"
					] ] }
				}
			}
		},
		"APISearchQueryOPTIONS": {
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"RestApiId": { "Ref": "RestAPI" },
				"ResourceId": { "Ref": "APISearchQuery" },
				"AuthorizationType": "NONE",
				"HttpMethod": "OPTIONS",
				"Integration": {
					"Type": "MOCK",
					"RequestTemplates": {
						"application/json": "{\"statusCode\": 200}"
					},
					"PassthroughBehavior": "WHEN_NO_MATCH",
					"IntegrationResponses": [ {
						"StatusCode": "200",
						"ResponseParameters": {
							"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
							"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
							"method.response.header.Access-Control-Allow-Origin": { "Fn::If": [ "CORSIsRestrictive",
								{ "Fn::Join": [ "", [ "'", "api.", { "Ref": "DomainName" }, "'" ] ] },
								"'*'"
							] }
						},
						"ResponseTemplates": {
							"application/json": ""
						}
					} ]
				},
				"MethodResponses": [ {
					"StatusCode": "200",
					"ResponseModels": {
						"application/json": "Empty"
					},
					"ResponseParameters": {
						"method.response.header.Access-Control-Allow-Headers": false,
						"method.response.header.Access-Control-Allow-Methods": false,
						"method.response.header.Access-Control-Allow-Origin": false
					}
				} ]
			}
		}
	},
	"Outputs": {
		"HostedZone": {
			"Description": "Route53 hosted zone name and website hostname.",
			"Value": { "Ref": "DomainName" }
		},
		"NameServers": {
			"Description": "Route53 name servers for the hosted zone.",
			"Value": { "Fn::Join": [ " ", { "Fn::GetAtt": [ "HostedZone", "NameServers" ] } ] }
		}
	}
}
